# HTTP 프로토콜이란?

- `HTTP(Hypertext Transfer Protocol) 프로토콜` : 인터넷상에서 데이터를 주고받기 위한 서버/클라이언트 모델을 따르는 프로토콜
    - `프로토콜` : 네트워크 통신을 위한 통신규칙
        - 프로토콜의 역할 : 데이터의 캡슐화와 캡슐 해체화를 하는 것
        - 네트워크 통신에서 OSI 참조 모델의 계층을 넘어설 때마다 데이터를 캡슐에 넣거나 꺼냄
- 어플리케이션 레벨의 프로토콜로 TCP/IP 위에서 작동
- 상태를 가지고 있지 않는 Stateless 프로토콜
- Method, Path, Version, Headers, Body 등으로 구성됨

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/baa16cb0-c8f7-44b5-9c9b-9cd3f1870bec/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/baa16cb0-c8f7-44b5-9c9b-9cd3f1870bec/Untitled.png)

# 특징

### Connectionless & Stateless

- 서버에 연결하고, 요청해서 응답을 받으면 연결을 끊음
- 자원 하나에 대해서 하나의 연결 만듦

### 장점

- 불특정 다수를 대상으로 하는 서비스에 적합한 방식
- 많은 사람들이 웹 서비스를 사용하더라도 접속유지는 최소한으로 할 수 있기 때문에 더 많은 유저의 요청을 처리할 수 있음

### 단점

- 클라이언트의 이전 상태를 알 수 없음

### Cookie

- 클라이언트와 서버의 상태 정보를 담고 있는 정보조각
- HTTP 프로토콜의 Stateless의 문제를 해결
- ex)

    첫 요청 시 :

    **클라이언트 로그인 성공 then 서버 로그인정보를 자신의 DB에 저장**

    (서버는 cookie를 키로하는 값을 데이터베이스에 저장하는 방식으로 "세션"을 유지한다)

    **and then return 쿠키 to 클라이언트**

    클라이언트는 다음 번 요청때 cookie를 서버에 보내는데,

    서버는 cookie 값으로 자신의 데이터베이스를 조회해서 로그인 여부를 확인할 수 있다.

    두번쨰 요청 시 :

    **클라이언트 request(cookie) to server then 서버는 자신의 DB 조회 and then 로그인여부 확인**

### Session (세션)

- 브라우저가 종료되기 전까지 클라이언트의 요청을 유지하게 해주는 기술

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ac5586c1-2850-4a5e-8c3e-d4585ed02252/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ac5586c1-2850-4a5e-8c3e-d4585ed02252/Untitled.png)

# HTTP vs. HTTPS

### HTTP

- 평문 데이터를 전송하는 프로토콜

    → 비밀번호나 주민번호 등을 주고 받으면 제3자에 의해 조회될 가능성 O

### HTTPS

- HTTP에 암호화가 추가된 프로토콜
- 자신의 공개키를 갖는 인증서를 발급하여 보내는 메세지를 공개키로 암호화함
- 공개키로 암호화된 메세지는 개인키를 가지고 있어야만 복호화가 가능

    → 기업을 제외한 누구도 원본 데이터를 얻을 수 없음

# 참고자료

- HTTP 프로토콜이란?

    [https://shlee0882.tistory.com/107](https://shlee0882.tistory.com/107):w
